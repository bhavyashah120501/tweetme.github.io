{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","open","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","responseType","onload","response","status","console","log","onerror","error","send","ActionBtn","tweet","action","handleActions","likes","type","display","className","onClick","event","preventDefault","tweetId","id","content","actionTweet","res","Tweet","styling","handleTweetRetweet","hideActions","useState","setactionTweet","path","window","location","pathname","idReg","match","tweetid","groups","isDetail","parent","Fragment","href","TweetList","newTweets","username","tweetsinit","setTweetsinit","Tweets","setTweets","tweetDidSet","setTweetDidSet","useEffect","final","concat","loadtweets","alert","newt","unshift","final2","map","index","key","TweetCreate","props","textAreaRef","React","createRef","didTweet","handleBackEndUpdate","onSubmit","newVal","createTweet","current","value","ref","required","TweetComponent","setNewTweets","canTweet","newTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","StrictMode","e","createElement","tweetEl","dataset","can_create","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.152e0b5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\n\r\nexport function backendLookup(method,endpoint,callback,data){\r\n  let jsonData\r\n  if(data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url =`http://localhost:8000/api${endpoint}`\r\n  xhr.open(method,url)\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.setRequestHeader('Content-Type','application/json')\r\n  if(csrftoken){\r\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\",\"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\",csrftoken)\r\n  }\r\n  const responseType = \"json\"\r\n  xhr.responseType = responseType\r\n  xhr.onload = function(){\r\n    callback(xhr.response,xhr.status)\r\n    console.log(xhr.response,xhr.status)\r\n  }\r\n  xhr.onerror = function(error){\r\n    callback({\"message\":\"Request was an error\"} ,400)\r\n  }\r\n  console.log(jsonData)\r\n  xhr.send(jsonData)\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport {actionTweet} from './lookup'\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function ActionBtn({tweet , action,handleActions}){\r\n  const likes = tweet.likes\r\n  const type = action.type\r\n  const handleClick = (event)=>{\r\n    event.preventDefault()\r\n    actionTweet(tweet.id,type,(res,status)=>{\r\n          handleActions(res,status)\r\n    })\r\n  }\r\n  const display = type === 'like' ? `${likes} ${action.display}` : action.display\r\n  return <button className='btn btn-primary' onClick = {handleClick}>{display}</button> \r\n} ","import {backendLookup} from '../lookup'\r\n\r\n\r\nexport function actionTweet(tweetId,action,callback){\r\n\tconst data = {id:tweetId,action:action , content:'heyy'}\r\n\tbackendLookup(\"POST\",'/tweets/action',callback,data)\r\n}\r\n\r\nexport function createTweet(newVal,callback){\r\n  backendLookup('POST','/tweet/create',callback,{tweet:newVal})\r\n}\r\n\r\n\r\nexport function loadtweets(username,callback){\r\n  let endpoint = '/tweets'\r\n  if(username!=null){\r\n  \tendpoint=`/tweets?username=${username}`\r\n  }\r\n  backendLookup('GET',endpoint,callback)\r\n}\r\n\r\n\r\n\r\nexport function loaddetailtweets(tweetId,callback){\r\n  let endpoint = `/tweets/${tweetId}`\r\n  backendLookup('GET',endpoint,callback)\r\n}","import React,{useState,useEffect} from 'react'\r\nimport {ActionBtn} from './buttons.js'\r\n\r\nexport function Tweet({styling,tweet,handleTweetRetweet,hideActions}){ \r\n  const [actionTweet,setactionTweet] = useState(tweet)\r\n  console.log(tweet,'tweet')\r\n  console.log(actionTweet,'actionTweet')\r\n  var path = window.location.pathname\r\n  var idReg = /(?<tweetid>\\d+)/\r\n  var match = path.match(idReg)\r\n  const tweetid = match ? match.groups.tweetid : -1\r\n\r\n  const isDetail = tweet!==null && `${tweetid}` === `${tweet.id}`\r\n  const handleActions=(res,status)=>{\r\n    if(status===200)\r\n    {\r\n      setactionTweet(res)\r\n    }\r\n    else if(status===201 && handleTweetRetweet){\r\n      console.log(res,'in')\r\n      handleTweetRetweet(res)\r\n    }\r\n  }\r\n  const handleLink=(event)=>{\r\n    event.preventDefault()\r\n    window.location.href = `/${tweet.id}`\r\n  }\r\n  return   <div className = {styling}>\r\n           <div>\r\n           <p>\r\n           {tweet.tweet}\r\n           </p> \r\n           {tweet.parent!=null ? <div ><p className='offset-2 text-muted'>Retweet</p><Tweet hideActions={true} styling={'col-10 p-3 col-md-8 bg-white mt-2 text-dark border mx-auto'} tweet={tweet.parent} /></div>: null}\r\n           </div>\r\n           <div className = 'btn btn-group'>\r\n           {hideActions === false && \r\n           <React.Fragment>\r\n           {<ActionBtn tweet = {actionTweet} handleActions={handleActions} action = { { type : 'like' , display: 'Like'} } />}\r\n           {<ActionBtn tweet = {actionTweet} handleActions={handleActions} action = { { type : 'unlike' , display:'UnLike'} } />}\r\n           {<ActionBtn tweet = {actionTweet} handleActions={handleActions} action = { { type : 'retweet' ,display : 'Retweet'} } />}\r\n           </React.Fragment>}\r\n           {isDetail === false ? <button onClick={handleLink} className='btn btn-outline-primary' > View </button> : null }\r\n           </div>\r\n           </div>\r\n}\r\n\r\n\r\n","import React,{useState,useEffect} from 'react'\r\nimport {loadtweets} from './lookup'\r\nimport {createTweet} from './lookup'\r\n\r\nimport {Tweet} from './detail.js'\r\n\r\n\r\n\r\nexport function TweetList({newTweets,username}){\r\n  const [tweetsinit ,setTweetsinit] = useState([])\r\n  const [Tweets,setTweets] = useState([])\r\n  const [tweetDidSet,setTweetDidSet] = useState(false)\r\n  useEffect(()=>{\r\n    // console.log('in first')\r\n    const final = [...newTweets].concat(tweetsinit)\r\n    if(final.length !== Tweets.length){\r\n      \r\n      // console.log('final',final)\r\n      setTweets(final)\r\n      \r\n      // console.log('tweets',Tweets)\r\n    }\r\n  },[newTweets,tweetsinit,Tweets])\r\n  useEffect(()=>{\r\n    if(tweetDidSet === false)\r\n    {\r\n      const Mycallback=(response,status)=>{\r\n        if(status === 200){\r\n          setTweetsinit(response)\r\n          setTweetDidSet(true)\r\n        }\r\n        else{\r\n          alert('There was an error')\r\n        }\r\n      }\r\n      loadtweets(null,Mycallback)\r\n    }\r\n  },[tweetsinit,tweetDidSet,setTweetDidSet])\r\n  useEffect(()=>{\r\n    console.log('changed')\r\n    console.log(Tweets)\r\n  },[Tweets])\r\n  const handleTweetRetweet=(newt)=>{\r\n    console.log(1,newt)\r\n    let final = [...tweetsinit]\r\n    // console.log(2,final)\r\n    final.unshift(newt)\r\n    // console.log(3,final)\r\n    setTweetsinit(final)\r\n    // console.log(4,tweetsinit)\r\n    // console.log(1,newt)\r\n    let final2 = [...Tweets]\r\n    // // console.log(2,final2)\r\n    final2.unshift(newt)\r\n    // // console.log(3,final2)\r\n    setTweets(final2)\r\n    // console.log(Tweets)\r\n  }\r\n  return (<div className='row'>\r\n            {Tweets.map((tweet,index)=>{\r\n              return <Tweet hideActions={false} handleTweetRetweet={handleTweetRetweet} styling={'col-10 mt-2 p-3 col-md-8 bg-white text-dark border'}  tweet = {tweet}  key={index} />\r\n            })}\r\n          </div>)\r\n}\r\n\r\n","import React,{useState,useEffect} from 'react'\r\nimport {createTweet} from './lookup'\r\n\r\n\r\n\r\nexport function TweetCreate(props){\r\n\tconst textAreaRef = React.createRef()\r\n\tconst {didTweet} = props\r\n\tconst [newTweets , setNewTweets] = useState([])\r\n\tconst handleBackEndUpdate =(res,status)=>{\r\n\t\tlet tempNewTweets = [...newTweets]\r\n\t\tif(status===201){\r\n\t\t\tdidTweet(res)\r\n\t\t}\r\n\t\telse{\r\n\t\t\talert('an error occured')\r\n\t\t}\r\n\t}\r\n\tconst handleSubmit=(event)=>{\r\n\t\tevent.preventDefault()\r\n\t\tconst newVal = textAreaRef.current.value\r\n\t\tcreateTweet(newVal,handleBackEndUpdate)\r\n\t\ttextAreaRef.current.value=''\r\n\t}\t\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\t\t<div className='col-12 mb-3'>\r\n\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t  <textarea ref={textAreaRef} required  className='form-control'>\r\n\t\t\t\t  </textarea>\r\n\t\t\t\t  <button type='submit' className='btn btn-primary' value='Submit'> Tweet </button>\r\n\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t )\r\n    \r\n}\r\n","import React,{useState,useEffect} from 'react'\r\nimport {TweetList} from './list'\r\nimport {ActionBtn} from './buttons'\r\nimport {Tweet} from './detail'\r\nimport {TweetCreate} from './create'\r\nimport {loaddetailtweets} from './lookup'\r\n\r\n\r\n\r\n\r\nexport function TweetComponent(props){\r\n\tconst textAreaRef = React.createRef()\r\n\tconst [newTweets , setNewTweets] = useState([])\r\n\tconst handleNewTweet =(newTweet)=>{\r\n\t\tlet tempNewTweets = [...newTweets]\r\n\t\ttempNewTweets.unshift(newTweet) \r\n\t\tsetNewTweets(tempNewTweets)\r\n\t}\r\n\treturn(\r\n\t\t<React.Fragment>\r\n\t\t\t<TweetCreate />\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tprops.canTweet && <TweetCreate didTweet={handleNewTweet} />\r\n\t\t\t}\r\n\t\t\t<TweetList newTweets={newTweets} {...props} />\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t\t )\r\n}\r\n\r\n\r\n\r\nexport function TweetDetailComponent(props){\r\n\tconsole.log(props)\r\n\tconst {tweetid}=props\r\n\tconsole.log(tweetid)\r\n\tconst [didLookup,setDidLookup] = useState(false)\r\n\tconst [tweet,setTweet] = useState(null)\r\n\tuseEffect(()=>{\r\n\t\tif(didLookup===false){\r\n\t\t\tconsole.log('in')\r\n\t\t\tloaddetailtweets(tweetid,(res,status)=>{\r\n\t\t\t\tif(status === 200){\r\n\t\t\t\t\tsetTweet(res)\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert('alert')\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetDidLookup(true)\r\n\t\t}\r\n\t},[didLookup,tweetid])\r\n\tconsole.log(tweet)\r\n\treturn tweet === null ? null : <Tweet hideActions={false} styling={'col-10 p-3 col-md-8 bg-white text-dark border'}  tweet = {tweet}  />\r\n}","import React  from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetComponent} from './tweets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <div>\n        <TweetComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetComponent,TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif(appEl){\n\tReactDOM.render(\n\t  <React.StrictMode>\n\t    <App />\n\t  </React.StrictMode>,\n\t  appEl\n\t);\n}\nconst e = React.createElement\nconst tweetEl = document.getElementById('tweetme')\nif(tweetEl){\n\tconsole.log(tweetEl.dataset)\n\tReactDOM.render(\n\t  <React.StrictMode>\n\t    <TweetComponent username={tweetEl.dataset.username} id={tweetEl.dataset.can_create} />\n\t  </React.StrictMode>,tweetEl\n\t);\n}\n\n\n\nconst tweetDetail= document.querySelectorAll('.tweet-detail')\n\ntweetDetail.forEach((container)=>{\n\tReactDOM.render(\n\t   e(TweetDetailComponent,container.dataset),container\n\t);\n})\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}